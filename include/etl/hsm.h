/******************************************************************************
The MIT License(MIT)

Embedded Template Library.
https://github.com/ETLCPP/etl
https://www.etlcpp.com

Copyright(c) 2019 Pontus Astrom, 2004 Stefan Heinzmann

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
******************************************************************************/

//***************************************************************************
// THIS FILE HAS BEEN AUTO GENERATED. DO NOT EDIT THIS FILE.
//***************************************************************************

//***************************************************************************
// To generate to header file, run this at the command line.
// Note: You will need Python and COG installed.
//
// python -m cogapp -d -e -ohsm.h -DHandlers=<n> hsm_generator.h
// Where <n> is the number of messages to support.
//
// e.g.
// To generate handlers for up to 16 events...
// python -m cogapp -d -e -ohsm.h -DHandlers=16 hsm_generator.h
//
// See generate.bat
//***************************************************************************

//
// \brief  Definitions, classes for designing hierarchical state machines
// \author Stefan Heinzmann, Pontus Astrom
// \date   2004-12-01, modified 2019-08-06
//
// The implementation is mostly taken from
// http://accu.org/index.php/journals/252 with small modifications to
// fix a few bugs, and add some additional UML statechart
// support. For instance, with this version it is possible to have a composite
// state as target for a transaction.

#ifndef ETL_HSM_INCLUDED
#define ETL_HSM_INCLUDED

#include "message_router.h"

namespace etl {
namespace hsm_state {

// ------------------------------------------------------------------------------------------
// top
// ------------------------------------------------------------------------------------------
template<typename H>
struct top
{
   typedef H Hsm;
   virtual void process_event(etl::imessage_router &, etl::imessage const &, Hsm &) const = 0;
   virtual unsigned get_id() const = 0;
};


// ------------------------------------------------------------------------------------------
// composite declaration for 16 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0 = void, typename M1 = void,
         typename M2 = void, typename M3 = void, typename M4 = void, typename M5 = void,
         typename M6 = void, typename M7 = void, typename M8 = void, typename M9 = void,
         typename M10 = void, typename M11 = void, typename M12 = void, typename M13 = void,
         typename M14 = void, typename M15 = void>
class composite;

template<typename H, unsigned ID, typename P = composite<H, 0, top<H> >, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13,
         typename M14, typename M15>
class composite : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
         case M12::ID: on_event<LEAF>(source, static_cast<M12 const &>(message), h, l); return;
         case M13::ID: on_event<LEAF>(source, static_cast<M13 const &>(message), h, l); return;
         case M14::ID: on_event<LEAF>(source, static_cast<M14 const &>(message), h, l); return;
         case M15::ID: on_event<LEAF>(source, static_cast<M15 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M12 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M13 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M14 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M15 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for top-state which has class top as parent
// ------------------------------------------------------------------------------------------
template<typename H>
class composite<H, 0> : public top<H>
{
public:
   typedef H Hsm;
   typedef top<H> Parent;
   typedef composite<H, 0, top<H> > Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
   }
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 15 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13,
         typename M14>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
         case M12::ID: on_event<LEAF>(source, static_cast<M12 const &>(message), h, l); return;
         case M13::ID: on_event<LEAF>(source, static_cast<M13 const &>(message), h, l); return;
         case M14::ID: on_event<LEAF>(source, static_cast<M14 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M12 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M13 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M14 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 14 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
         case M12::ID: on_event<LEAF>(source, static_cast<M12 const &>(message), h, l); return;
         case M13::ID: on_event<LEAF>(source, static_cast<M13 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M12 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M13 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 13 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
         case M12::ID: on_event<LEAF>(source, static_cast<M12 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M12 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 12 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 11 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 10 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 9 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 8 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 7 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5, M6> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 6 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5>
class composite<H, ID, P, M0, M1, M2, M3, M4, M5> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4, M5> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 5 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4>
class composite<H, ID, P, M0, M1, M2, M3, M4> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3, M4> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 4 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3>
class composite<H, ID, P, M0, M1, M2, M3> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2, M3> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 3 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2>
class composite<H, ID, P, M0, M1, M2> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1, M2> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 2 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1>
class composite<H, ID, P, M0, M1> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0, M1> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 1 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0>
class composite<H, ID, P, M0> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P, M0> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
};

// ------------------------------------------------------------------------------------------
// composite specialisation for 0 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P>
class composite<H, ID, P> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef composite<H, ID, P> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm &);

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      Parent::handle_event(source, message, h, l);
   }
};

// ------------------------------------------------------------------------------------------
// leaf declaration for 16 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0 = void, typename M1 = void,
         typename M2 = void, typename M3 = void, typename M4 = void, typename M5 = void,
         typename M6 = void, typename M7 = void, typename M8 = void, typename M9 = void,
         typename M10 = void, typename M11 = void, typename M12 = void, typename M13 = void,
         typename M14 = void, typename M15 = void>
class leaf;

template<typename H, unsigned ID, typename P = composite<H, 0, top<H> >, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13,
         typename M14, typename M15>
class leaf : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
         case M12::ID: on_event<LEAF>(source, static_cast<M12 const &>(message), h, l); return;
         case M13::ID: on_event<LEAF>(source, static_cast<M13 const &>(message), h, l); return;
         case M14::ID: on_event<LEAF>(source, static_cast<M14 const &>(message), h, l); return;
         case M15::ID: on_event<LEAF>(source, static_cast<M15 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M12 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M13 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M14 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M15 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13,
         typename M14, typename M15>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 15 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13,
         typename M14>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
         case M12::ID: on_event<LEAF>(source, static_cast<M12 const &>(message), h, l); return;
         case M13::ID: on_event<LEAF>(source, static_cast<M13 const &>(message), h, l); return;
         case M14::ID: on_event<LEAF>(source, static_cast<M14 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M12 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M13 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M14 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13,
         typename M14>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 14 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
         case M12::ID: on_event<LEAF>(source, static_cast<M12 const &>(message), h, l); return;
         case M13::ID: on_event<LEAF>(source, static_cast<M13 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M12 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M13 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12, typename M13>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 13 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
         case M12::ID: on_event<LEAF>(source, static_cast<M12 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M12 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11, typename M12>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 12 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
         case M11::ID: on_event<LEAF>(source, static_cast<M11 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M11 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10, typename M11>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 11 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
         case M10::ID: on_event<LEAF>(source, static_cast<M10 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M10 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9,
         typename M10>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 10 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
         case M9::ID: on_event<LEAF>(source, static_cast<M9 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M9 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8, typename M9>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8, M9>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 9 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
         case M8::ID: on_event<LEAF>(source, static_cast<M8 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M8 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7, typename M8>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7, M8>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 8 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
         case M7::ID: on_event<LEAF>(source, static_cast<M7 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M7 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6, typename M7>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6, M7>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 7 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
         case M6::ID: on_event<LEAF>(source, static_cast<M6 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M6 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5,
         typename M6>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5, M6>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 6 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5>
class leaf<H, ID, P, M0, M1, M2, M3, M4, M5> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4, M5> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
         case M5::ID: on_event<LEAF>(source, static_cast<M5 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M5 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4, typename M5>
const leaf<H, ID, P, M0, M1, M2, M3, M4, M5>
      leaf<H, ID, P, M0, M1, M2, M3, M4, M5>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 5 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4>
class leaf<H, ID, P, M0, M1, M2, M3, M4> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3, M4> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
         case M4::ID: on_event<LEAF>(source, static_cast<M4 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M4 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3, typename M4>
const leaf<H, ID, P, M0, M1, M2, M3, M4>
      leaf<H, ID, P, M0, M1, M2, M3, M4>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 4 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3>
class leaf<H, ID, P, M0, M1, M2, M3> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2, M3> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
         case M3::ID: on_event<LEAF>(source, static_cast<M3 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M3 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2, typename M3>
const leaf<H, ID, P, M0, M1, M2, M3>
      leaf<H, ID, P, M0, M1, M2, M3>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 3 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2>
class leaf<H, ID, P, M0, M1, M2> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1, M2> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
         case M2::ID: on_event<LEAF>(source, static_cast<M2 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M2 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1,
         typename M2>
const leaf<H, ID, P, M0, M1, M2>
      leaf<H, ID, P, M0, M1, M2>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 2 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0, typename M1>
class leaf<H, ID, P, M0, M1> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0, M1> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
         case M1::ID: on_event<LEAF>(source, static_cast<M1 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
   template<typename LEAF>
   void on_event(etl::imessage_router &, M1 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0, typename M1>
const leaf<H, ID, P, M0, M1>
      leaf<H, ID, P, M0, M1>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 1 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P, typename M0>
class leaf<H, ID, P, M0> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P, M0> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      switch (message.message_id)
      {
         case M0::ID: on_event<LEAF>(source, static_cast<M0 const &>(message), h, l); return;
      }
      Parent::handle_event(source, message, h, l);
   }

private:
   template<typename LEAF>
   void on_event(etl::imessage_router &, M0 const &, Hsm &, LEAF const &) const;
};

template<typename H, unsigned ID, typename P, typename M0>
const leaf<H, ID, P, M0>
      leaf<H, ID, P, M0>::obj;

// ------------------------------------------------------------------------------------------
// leaf specialisation for 0 messages
// ------------------------------------------------------------------------------------------
template<typename H, unsigned ID, typename P>
class leaf<H, ID, P> : public P
{
public:
   typedef H Hsm;
   typedef P Parent;
   typedef leaf<H, ID, P> Self;

   static void handle_entry(Hsm &) {}
   static void handle_exit(Hsm &) {}
   static void handle_init(Hsm & arg)
   {
       arg.set_state(obj);
   }

   static const leaf obj;

   virtual unsigned get_id() const
   {
      return ID;
   }
   virtual void process_event(etl::imessage_router & source,
                              etl::imessage  const & message,
                              Hsm                  & h) const
   {
      handle_event(source, message, h, *this);
   };

   template<typename LEAF>
   void handle_event(etl::imessage_router & source, etl::imessage const & message,
                     Hsm & h, LEAF const & l) const
   {
      Parent::handle_event(source, message, h, l);
   }
};

template<typename H, unsigned ID, typename P>
const leaf<H, ID, P>
      leaf<H, ID, P>::obj;

// ------------------------------------------------------------------------------------------
// Init
// ------------------------------------------------------------------------------------------
template<typename C>
struct Init
{
  typedef C Child;
  typedef typename C::Hsm Hsm;
  Init(Hsm & arg) : _hsm(arg) { };
  ~Init()
  {
    Child::handle_entry(_hsm);
    Child::handle_init(_hsm);
  }
  Hsm & _hsm;
};

namespace _private_
{
  // ------------------------------------------------------------------------------------------
  // Is_child
  // See GOTW #71 for design
  // ------------------------------------------------------------------------------------------
  template<typename C, typename P>
  struct Is_child
  {
  private:
    typedef C Child;
    typedef P Parent;
    class  Yes { char a[1]; };
    class  No { char a[5]; };
    static Yes test(Parent *); // undefined
    static No  test(...);      // undefined

  public:
    enum {
      Res =
      sizeof(test(static_cast<Child *>(0))) == sizeof(Yes) ? 1 : 0
    };
  };

  // ------------------------------------------------------------------------------------------
  // Bool
  // ------------------------------------------------------------------------------------------
  template<bool> class Bool { };
}

// ------------------------------------------------------------------------------------------
// transition
// ------------------------------------------------------------------------------------------
template<typename C, typename S, typename T>
struct transition
{
   typedef C Current;
   typedef S Source;
   typedef T Target;
   typedef typename Current::Hsm Hsm;
   typedef typename Current::Parent Current_parent;
   typedef typename Target::Parent Target_parent;

   enum // work out when to terminate template recursion
   {
      eTB_CB    = _private_::Is_child<Target_parent, Current_parent>::Res,
      eS_CB     = _private_::Is_child<Source       , Current_parent>::Res,
      eS_C      = _private_::Is_child<Source       , Current       >::Res,
      eC_S      = _private_::Is_child<Current      , Source        >::Res,
      exitStop  = eTB_CB && eS_C,
      entryStop = eS_C || (eS_CB && !eC_S)
   };

   transition(Hsm & arg)
      : _hsm(arg)
   {
      exit_actions(_hsm, _private_::Bool<false>());
   }

   ~transition()
   {
      typedef transition<Target, Source, Target> Trans;
      Trans::entry_actions(_hsm, _private_::Bool<false>());
      Target::handle_init(_hsm);
   }

   // We use overloading to stop recursion. The more natural template
   // specialization method would require to specialize the inner
   // template without specializing the outer one, which is
   // forbidden.
   static void exit_actions (Hsm &, _private_::Bool<true>) {}
   static void exit_actions (Hsm & h, _private_::Bool<false>)
   {
      typedef transition<Current_parent, Source, Target> Trans;
      Current::handle_exit(h);
      Trans::exit_actions(h, _private_::Bool<exitStop>());
   };

   static void entry_actions(Hsm &, _private_::Bool<true >) {}
   static void entry_actions(Hsm & h, _private_::Bool<false>)
   {
      typedef transition<Current_parent, Source, Target> Trans;
      Trans::entry_actions(h, _private_::Bool<entryStop>());
      Current::handle_entry(h);
   };

private:
   Hsm & _hsm;
};

} // namespace hsm_state

// ------------------------------------------------------------------------------------------
// hsm: The base class for the finite state machine
// ------------------------------------------------------------------------------------------
template<typename DERIVED_HSM>
class hsm : public etl::imessage_router
{
public:
   typedef DERIVED_HSM derived_hsm;
   typedef hsm_state::top<derived_hsm> state;

   // Construction / destruction
   hsm(etl::message_router_id_t id)
      : etl::imessage_router(id),
      _state (nullptr)
   {
   };

   // Accepts everything but sinks unhandled messages
   bool is_started() const
   {
      return _state != nullptr;
   };

   bool accepts(etl::message_id_t) const
   {
      return true;
   };

   bool is_null_router() const
   {
      return false;
   };

   state const * get_state () const
   {
      return _state;
   };

   void set_state(state const & arg)
   {
      _state = &arg;
   };

private:
   const state* _state;
};

} // namespace etl

#endif // ETL_HSM_INCLUDED
